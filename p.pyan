/*
    Use compiler option 
         -java
*/

<<<<<<< HEAD
@annot("This is the program")
@feature("option", "debug")
@feature("option", "optimize")
@annot( [ [. "masterMOP", "MOP master" .] ] )
@feature("name", [ [ 0, 1 ], [ 2, 3 ] ] )
@setVariable(test, true)
@addToSet(untaintedDoNotCheckIn, "other.Taint")
program 

    @annot("This is cyan.util")
    @feature("poption", "package debug")
    @feature("poption", [ "optimize", "very", "much" ] )
    @annot( [ [. "masterMOP", "MOP master", 12345 .] ] )
    @feature("pname", [ [ 0, 1 ], [ 2, 3 ] ] )
    package cyan.util at "C:\Dropbox\Cyan\lib\cyan\util"
    @feature(communicateInPackage, on)
    package bank 
    package cyan.io at "C:\Dropbox\Cyan\lib\cyan\io"
    
    @feature(communicateInPackage, on)
    package main 
=======
@setVariable(debug, "yes")
@setVariable(author, "Jose") 
   /*  Because of this association, prototype  'TaintedToUntainted'
       of package 'untainted' can cast expressions of type 
       T@tainted to T@untainted in which T is any type.
   */
@addToSet(untaintedDoNotCheckIn, "untainted.TaintedToUntainted")
program

    main metaobjectTest.Program
    package cyan.math 
    package cyan.io   
    
    @setVariable(test, create)
    @setVariable(goal, "Test all metaobjects")
    package metaobjectTest
    
    @addToSet(overrideTest, SubOverrideTest)
    package main

    
>>>>>>> f9511e622c9a0a82b825c18284a930695eb066ef
