package conceptPackage
import other

@concept{*

    Int is typeof( Int + Int ),
    typeof( conceptPackage.PA ma1: 0 ma2: "" ) is Boolean,
    conceptPackage.PA implements conceptPackage.PE,
    conceptPackage.PA subprototype SuperA,
    conceptA(conceptPackage.PA),
    conceptB(conceptPackage.PB),
    conceptPackage.PE interface,
    conceptPackage.PD interface,
    conceptPackage.PA implements I1,
    conceptPackage.PA implements I2,
    conceptPackage.PA noninterface,
    conceptPackage.PB subprototype conceptPackage.PA,
    conceptPackage.PB implements I1,
    conceptPackage.PB implements I3, 
    conceptPackage.PB implements conceptPackage.PD,
    conceptPackage.PB noninterface,
    conceptPackage.PA superprototype conceptPackage.PB,
    conceptPackage.PA has [
        func ma1: Int ma2: String -> Boolean
        func runA
        func runA: Array<String>
        func repAB
        func repAB: String ->             Char // typeof(conceptPackage.PA repAB: "" repAB2: 0) 
        func repAB: String repAB2: Int -> Char // typeof(conceptPackage.PA repAB: String)  
        //func with: Char with: Int -> typeof(conceptPackage.PA repAB: String)  
    ],
    conceptPackage.PB has [
        func mb1: Int mb2: String -> Boolean
        func runB
        func runB: Array<String>
        func repAB
        func repAB: String -> Char
        func repAB: String repAB2: Int -> Char
    ],
    Int in [ Int, Long, String ],
    
    cyan.lang.comparison(Int),
    
    axiom otherPlusTest: conceptPackage.PA a, conceptPackage.PA b {%
        if a + b != b + a {
            ^"conceptPackage.PA is not commutative --- "
        }
        ^Nil
    %}

    
*}
 
object GTest<conceptPackage.PA, conceptPackage.PB, Int, conceptPackage.PD, conceptPackage.PE> 

    func run  {
        let conceptPackage.PA a = conceptPackage.PA new; 
        a runA; 
        Out println: (a repAB: "aaa"); 
        let G<String, Int> g = G<String, Int>()
    } 

    func test -> Char  = 'a';


end

