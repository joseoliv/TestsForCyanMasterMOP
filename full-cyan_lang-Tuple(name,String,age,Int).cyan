package cyan.lang

@createTuple#afterResTypes 
object Tuple<name, String, age, Int> 


 @pushCompilationContextStatement(pp294, pp) 

    // Methods added by the compiler
    override    func prototype -> Tuple<name, String, age, Int> {
        @javacode{* return prototype;
        *}
    } 
 @popCompilationContext(pp294) 
 @pushCompilationContextStatement(atisemAn_id_160, "createTuple", cyan.lang, "C:\Dropbox\Cyan\lib\cyan\lang\--tmp\Tuple(name,String,age,Int).cyan", 3, "    func init: String g1, Int g2    func name: String g1 age: Int g2 -> Tuple<name, String, age, Int>  var String _name     func name -> String    func name: String other  var Int _age     func age -> Int    func age: Int other     func == (Dyn other) -> Boolean     func hashCode -> Int     func asString -> String ") 
    func init: String g1, Int g2 { 
        _name = g1;
        _age = g2;
    }
    func name: String g1 age: Int g2 -> Tuple<name, String, age, Int> { 
        return Tuple<name, String, age, Int> new:  g1,  g2;
    }
    @annot( #name ) var String _name 
    func name -> String = _name;
    func name: String other  { _name = other }
    @annot( #age ) var Int _age 
    func age -> Int = _age;
    func age: Int other  { _age = other }
    override
    func == (Dyn other) -> Boolean {
        if other isA: Tuple<name, String, age, Int> {
            var Tuple<name, String, age, Int> another;
            @javacode{*             _another = (_Tuple_LT_GP__name_GP_CyString_GP__age_GP_CyInt_GT ) _other;
            *}
            if name != (another name) {  return false }
            if age != (another age) {  return false }
            return true
        }
        else {
            return false
        }
     }
    override
    func hashCode -> Int = name hashCode + age hashCode;

    override    func asString -> String {
         return "[. name = " ++ name asStringQuoteIfString ++ ", age = " ++ age asStringQuoteIfString ++ " .]"
     }

 @popCompilationContext(atisemAn_id_160) 
 @pushCompilationContextStatement(new295, new) 
    // Methods added by the compiler

    override    func clone -> Tuple<name, String, age, Int> {
        @javacode<<*
        try {
            return (_Tuple_LT_GP__name_GP_CyString_GP__age_GP_CyInt_GT ) this.clone(); 
        } catch (CloneNotSupportedException e) { }
        return null;
        *>>    } 

    func new: ( String p0, Int p1 ) -> Tuple<name, String, age, Int> {
        @javacode<**< 
            return new _Tuple_LT_GP__name_GP_CyString_GP__age_GP_CyInt_GT(_p0, _p1);
        >**>
    }
 @popCompilationContext(new295) 
 @pushCompilationContext(inner2136, inner) 
    override
    func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key, String, value, Any>> {
        return Array<Tuple<key, String, value, Any>> new;
    }
    override
    func getAnnotListNameDoesNotCollide__ -> Array<Any> {
        return Array<Any> new;
    }

    override
    func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName, String, key, String, value, Any>> {
        let slotFeatureList_name_does_not_collide__ = Array<Tuple<slotName, String, key, String, value, Any>> new;
        slotFeatureList_name_does_not_collide__ add: [. slotName = "_name", key = "annot", value = Any toAny: "name" .];
        slotFeatureList_name_does_not_collide__ add: [. slotName = "_age", key = "annot", value = Any toAny: "age" .];
        return slotFeatureList_name_does_not_collide__;
    }
 @popCompilationContext(inner2136) 
 @pushCompilationContext(inner2137, inner)  @popCompilationContext(inner2137) 
end

